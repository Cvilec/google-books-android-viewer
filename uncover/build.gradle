/*
Copyright 2017 Audrius Meskauskas

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 2
        versionName "1.2"
        setProperty("archivesBaseName", "uncover-$versionName")
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}


signing {
    sign configurations.default
    sign configurations.archives
    sign file("$buildDir/publications/maven/pom-default.xml")
    // Shame on that, but still looking for work around.
    sign file("${project.gradle.gradleUserHomeDir}/../.m2/repository/io/github/andviane/uncover/maven-metadata.xml")
}


// Only this library is published
// ../gradlew clean build publishMavenPublicationToMavenLocalRepository
publishing {
    publications {
        maven(MavenPublication) {
            groupId 'io.github.andviane' 
            artifactId 'uncover'
            version android.defaultConfig.versionName

            artifact(sourceJar)
            artifact(javadocJar)
            artifact("$buildDir/libs/uncover-${android.defaultConfig.versionName}-javadoc.jar.asc") {
                classifier = 'javadoc' 
                extension = 'jar.asc'
                builtBy signArchives
            }
            artifact("$buildDir/libs/uncover-${android.defaultConfig.versionName}-source.jar.asc")  {
                classifier = 'source' 
                extension = 'jar.asc'
                builtBy signArchives
            }

            artifact("$buildDir/publications/maven/pom-default.xml.asc")  {
                extension = 'pom.asc'
                classifier = null 
                builtBy signDefault
            }

            artifact("${project.gradle.gradleUserHomeDir}/../.m2/repository/io/github/andviane/uncover/maven-metadata.xml.asc")  {
                classifier = 'maven-metadata.xml' 
                builtBy signDefault
            }

            artifact("$buildDir/outputs/aar/uncover-${android.defaultConfig.versionName}-release.aar")
            artifact("$buildDir/outputs/aar/uncover-${android.defaultConfig.versionName}-release.aar.asc")  {
                classifier = 'aar' 
                builtBy signDefault
            }


            pom.withXml {

            def n = asNode();
            n.appendNode('name', 'Uncover')
            n.appendNode('description', 'Android library to bridge infinite scroller based on RecyclerView with slow asynchronous data source like web service or database')
            n.appendNode('url', 'https://github.com/andviane/google-books-android-viewer')
            def licenses = n.appendNode('licenses')
            def apache = licenses.appendNode('license')
            apache.appendNode('name', 'Apache License, Version 2.0')
            apache.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
            apache.appendNode('distribution', 'repo')

            def scm = n.appendNode('scm')  
            scm.appendNode('url', 'https://github.com/andviane/google-books-android-viewer.git')

            def dependenciesNode = asNode().appendNode('dependencies')

            configurations.compile.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
            }
            configurations.testCompile.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'test')
            }
            def d = n.appendNode('developers')
            def me = d.appendNode('developer')
            me.appendNode('id', 'andviane')
            me.appendNode('name', "Audrius Meskauskas")
            me.appendNode('email', "mike.pukuotukas@meska.info")
            me.appendNode('url', "https://ch.linkedin.com/in/audriusa")
            def roles = me.appendNode('roles')
            roles.appendNode('role', "architect")
            roles.appendNode('role', "developer")
            me.appendNode('timezone', 'utc')
         }
       }
    }

    repositories {
        mavenLocal()
        maven {
          credentials {
            username System.env.ANDVIANE_USERNAME
            password System.env.ANDVIANE_PASSWORD
          }
          // url 'https://oss.sonatype.org/content/repositories/snapshots'
          url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
        }
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "source"
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourceJar
}

    


